<comm e="$Id: perso.txt,v 1.1.2.7 1999-04-10 06:40:46 ddr Exp $">
<comm e="Copyright (c) 1999 INRIA">
<comm
  Context:
    p = person to be displayed
>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<head>
  <meta name="ROBOTS" content="NONE">
  <title>
    <match (public_name p, qualifiers p)>
    <with (n, [nn :: _]) when n != ""><eval n> <eval nn>
    <with (n, []) when n != ""><eval n> <eval surname p>
    <with _><eval first_name p> <eval surname p>
    </match>
  </title>
</head>
<body>

<h1>
  <match (public_name p, qualifiers p)>
  <with (n, [nn :: _]) when n != ""><eval n> <em><eval nn></em>
  <with (n, []) when n != ""><eval n> <eval surname p>
  <with (n, [nn :: _])><eval first_name p> <em><eval nn></em>
  <with (_, [])>
    <a href="`commd`m=P;v=`url_encode (lower (first_name p))`">
    <eval first_name p></a>
    <a href="`commd`m=N;v=`url_encode (lower (surname p))`">
    <eval surname p></a>
  </match>
</h1>

<p>

<match find_person_in_env "z">
<with Some d>
  <match find_sosa p d>
  <with Some n>
    <em>Sosa:
    <a href="`commd`m=RL;i1=`index p`;i2=`index d`;b1=1;b2=`n`">
    <eval string_of_num n></a>
    </em><p>
  <with None>
  </match>
<with None>
</match>

<if is_rtl>
  <a href="`commd`">
  <img
   src="`commd`m=IM;v=up.gif" width=16 height=16 alt="^^" align="left"></a>
<else>
  <a href="`commd`">
  <img
   src="`commd`m=IM;v=up.gif" width=16 height=16 alt="^^" align="right"></a>
</if>

<if auth p>
  <match image p>
  <with "">
    <match auto_image_file p>
    <with Some f>
      <match image_size f>
      <with Some (width, height)>
        <img src="`commd`m=IM;v=`url_encode (basename f)`;d=`modtime f`"
         width=`width` height=`height` alt="`transl \"image\"`">
      <with None>
        <img src="`commd`m=IM;v=`url_encode (basename f)`;d=`modtime f`"
         alt="`transl \"image\"`">
      </match>
      <p>
    <with None>
    </match>
  <with s>
    <if string_length s GT string_length "http://" AND
        string_sub s 0 (string_length "http://") = "http://">
      <img src=s alt="`transl \"image\"`">
      <p>
    <else>
      <if is_implicit_filename s>
        <match image_file_name s>
        <with Some fname>
           <match image_size fname>
           <with Some (width, height)>
             <img src="`commd`m=IM;v=`s`" width=`width` height=`height`
              alt="`transl \"image\"`">
           <with None>
             <img src="`commd`m=IM;v=`s`" alt="`transl \"image\"`">
           </match>
           <p>
        <with None>
        </match>
      </if>
    </if>
  </match>
</if>

<match (public_name p, qualifiers p)>
<with (n, [_ :: nnl]) when n != "">
  <for nn in nnl>
    <eval n> <em><eval nn></em><br>
  </for>
<with (_, [_ :: nnl])>
  <for nn in nnl>
    <eval first_name p> <em><eval nn></em><br>
  </for>
</match>

<for a in aliases p>
  <eval transl "Alias"> <em><strong><eval a></strong></em><br>
</for>

<if has_titles p AND not (is_private_access p)>
  <em><eval titles p>.</em><br>
</if>

<match (public_name p, qualifiers p)>
<with ("", [])>
<with _>
  <em>
  (<a href="`commd`m=P;v=`url_encode (lower (first_name p))`"><eval
    first_name p></a>
   <a href="`commd`m=N;v=`url_encode (lower (surname p))`"><eval
    surname p></a>)</em><br>
</match>

<for n in surnames_aliases p>
  <em>(<eval (first_name p)> <eval n>)</em><br>
</for>

<for n in first_names_aliases p><em>(<eval n>...)</em><br></for>

<match (public_name p, qualifiers p, aliases p, has_titles p)>
<with ("", [], _, _)><p>
<with (_, _, [_ :: _], _)><p>
<with (_, _, _, True)><p>
</match>

<if auth p>
  <match occupation p>
  <with "">
  <with s><em><eval s></em><br>
  </match>
</if>

<if auth p>
  <match (birth_date p, birth_place p)>
  <with (None, "")>
  <with _><em><eval transl_nth "Born" (sex p)>
  </match>
  <match birth_date p>
  <with Some d>
    <eval ondate d><strip>
    <if is_anniversary d>
      <match death p>
      <with NotDead> (<eval transl "happy birthday to you!">)
      </match>
    </if>
  </match><strip>
  <match birth_place p>
  <with "">
  <with s> - <eval s>
  </match><strip>
  <match (birth_date p, birth_place p)>
  <with (None, "")>
  <with _>.</em><br>
  </match>
</if>

<if auth p>
  <match (baptism_date p, baptism_place p)>
  <with (Some d, "")>
    <em><eval transl_nth "Baptized" (sex p)> <eval ondate d>.</em><br>
  <with (Some d, s)>
    <em><eval transl_nth "Baptized" (sex p)> <eval ondate d>
    - <eval s>.</em><br>
  <with (None, "")>
  <with (None, s)>
    <em><eval transl_nth "Baptized" (sex p)> - <eval s>.</em><br>
  </match>
</if>

<if auth p>
  <match death p>
  <with Death dr d>
    <em>
    <match dr>
    <with Unspecified><eval transl_nth "Died" (sex p)>
    <with Murdered><eval transl_nth "Murdered" (sex p)>
    <with Killed><eval transl_nth "Killed (in action)" (sex p)>
    <with Executed><eval transl_nth "Executed (legally killed)" (sex p)>
    <with Disappeared><eval transl_nth "Disappeared" (sex p)>
    </match>
    <if death_place p != ""><eval ondate d> - <eval death_place p>.
    <else><eval ondate d>.
    </if>
    </em><br>
  <with DeadYoung><em><eval transl_nth "Dead young" (sex p)>.</em><br>
  <with DeadDontKnowWhen>
    <if death_place p != "">
      <em><eval transl_nth "Died" (sex p)> - <eval death_place p>.</em><br>
    <else>
      <match (birth_date p)>
      <with (Some d)>
        <let (_, _, y) = passed_time d today>
        <if y LT 120>
          <em><eval transl_nth "Died" (sex p)>.</em><br>
        </if>
      <with None><em><eval transl_nth "Died" (sex p)>.</em><br>
      </match>
    </if>
  </match>
</if>

<if auth p>
  <match (birth_date p, death p)>
  <with (Some d, NotDead)>
    <if day d = 0 AND month d = 0 AND precision d != Sure>
    <else>
      <em><eval transl "Age">:
      <match (passed_time d today)>
      <with (0, 0, 0)><eval transl "birth">
      <with (1, 0, 0)><eval transl "one day old">
      <with (d, 0, 0)><eval d> <eval transl "days old">
      <with (_, 1, 0)><eval transl "one month old">
      <with (_, m, 0)><eval m> <eval transl "months old">
      <with (_, 0, 1)><eval transl "one year old">
      <with (_, m, 1)><eval (m + 12)> <eval transl "months old">
      <with (_, _, y)><eval y> <eval transl "years old">
      </match>.</em><br>
    </if>
  </match>
</if>

<if auth p>
  <match (birth_date p, death p)>
  <with (Some d1, Death _ d2)>
    <if precision d1 = Sure AND precision d2 = Sure>
      <em><eval transl "Death age:">
      <match (passed_time d1 d2)>
      <with (0, 0, 0)><eval transl "birth">
      <with (1, 0, 0)><eval transl "one day old">
      <with (d, 0, 0)><eval d> <eval transl "days old">
      <with (_, 1, 0)><eval transl "one month old">
      <with (_, m, 0)><eval m> <eval transl "months old">
      <with (_, 0, 1)><eval transl "one year old">
      <with (_, m, 1)><eval (m + 12)> <eval transl "months old">
      <with (_, _, y)><eval y> <eval transl "years old">
      </match>.</em><br>
    </if>
  </match>
</if>

<if auth p>
  <match (burial p, burial_place p)>
  <with (Buried (Some d), "")>
    <em><eval transl_nth "Buried" (sex p)> <eval ondate d>.</em><br>
  <with (Buried (Some d), s)>
    <em><eval transl_nth "Buried" (sex p)> <eval ondate d> - <eval s>.</em><br>
  <with (Buried None, "")>
  <with (Buried None, s)>
    <em><eval transl_nth "Buried" (sex p)> - <eval s>.</em><br>
  <with (Cremated (Some d), "")>
    <em><eval transl_nth "Cremated" (sex p)> <eval ondate d>.</em><br>
  <with (Cremated (Some d), s)>
    <em><eval transl_nth "Cremated" (sex p)> <eval ondate d> - <eval s>.</em>
    <br>
  <with (Cremated None, "")>
  <with (Cremated None, s)>
    <em><eval transl_nth "Cremated" (sex p)> - <eval s>.</em><br>
  </match>
</if>

<em>Consanguinity to display...</em><br>

<match parents p>
<with Some fam>
  <h3><eval transl "Parents"></h3>
  <ul>
  <for p in [father fam; mother fam]>
    <li>
      <a href="`commd``access p`">
      <match main_title p>
      <with Some t when not (is_private_access p)>
        <eval titled_person_text p t></a>,
        <em><eval title_ident t> <eval title_place t></em>
      <with _><eval person_text p></a>
      </match>
      <if auth p>
        <match (birth_date p, death p)>
        <with (Some bd, NotDead)><em><eval year_p bd>-</em>
        <with (Some bd, Death _ dd)><em><eval year_p bd>-<eval year_p dd></em>
        <with (Some bd, DeadYoung)><em><eval year_p bd>+</em>
        <with (Some bd, DeadDontKnowWhen)><em><eval year_p bd>+</em>
        <with (Some bd, DontKnowIfDead)><em>*<eval year_p bd></em>
        <with (_, Death _ dd)><em>+<eval year_p dd></em>
        </match>
      </if>
  </for>
  </ul>
  <p>
</match>

<match families p>
<with []>
<with faml>
  <h3><eval transl_nth "Marriage/marriages" 1>
  <eval transl "and"> <eval transl_nth "child/children" 1></h3>
  <ul>
  <for fam in faml>
  <li>
    <if are_not_married fam AND auth p AND auth (spouse p fam)>
      <eval transl "With">
    <else>
      <format (transl_nth "Married%t to" (sex p))>
        <if auth p AND auth (spouse p fam)>
          <match (marriage_date fam, marriage_place fam)>
          <with (None, "")>
          <with (None, s)>, <em><eval s></em>,
          <with (Some d, "")> <em><eval ondate d></em>
          <with (Some d, s)> <em><eval ondate d>, <eval s></em>,
          </match>
        </if>
    </if>
    <for p in [spouse p fam]>
      <a href="`commd``access p`">
      <match main_title p>
      <with Some t when not (is_private_access p)>
        <eval titled_person_text p t></a>,
        <em><eval title_ident t> <eval title_place t></em>
      <with _><eval person_text p></a>
      </match>
      <if auth p>
        <match (birth_date p, death p)>
        <with (Some bd, NotDead)> <em><eval year_p bd>-</em>
        <with (Some bd, Death _ dd)> <em><eval year_p bd>-<eval year_p dd></em>
        <with (Some bd, DeadYoung)> <em><eval year_p bd>+</em>
        <with (Some bd, DeadDontKnowWhen)> <em><eval year_p bd>+</em>
        <with (Some bd, DontKnowIfDead)> <em>*<eval year_p bd></em>
        <with (_, Death _ dd)> <em>+<eval year_p dd></em>
        </match>
      </if>
    </for><strip>
    <if list_length (children fam) != 0>
      <if are_not_married fam AND auth p AND auth (spouse p fam)>
      <else>, <eval transl "having as children">
      </if>
      <ul>
      <for c in (children fam)>
      <li>
        <if sex p = 0 AND surname c != surname p OR
            sex p = 1 AND surname c != surname (spouse p fam)>
          <a href="`commd``access c`"><eval first_name c> <eval surname c></a>
        <else>
          <a href="`commd``access c`"><eval first_name c></a>
        </if>
        <if auth p>
          <match (birth_date c, death c)>
          <with (Some bd, NotDead)><em><eval year_p bd>-</em>
          <with (Some bd, Death _ dd)>
            <em><eval year_p bd>-<eval year_p dd></em>
          <with (Some bd, DeadYoung)><em><eval year_p bd>+</em>
          <with (Some bd, DeadDontKnowWhen)><em><eval year_p bd>+</em>
          <with (Some bd, DontKnowIfDead)><em>*<eval year_p bd></em>
          <with (_, Death _ dd)><em>+<eval year_p dd></em>
          </match>
        </if>
      </for>
      </ul>
    </if>
  </for>
  </ul>
  <p>
</match>

<if auth p>
  <if notes p != "">
    <h3><eval transl_nth "Note/notes" 1></h3>
    <ul><li>
    <eval notes p>
    </ul>
    <p>
  </if>
</if>

<h4>
<a href="`commd``access p`;m=R"><eval transl "Relationship computing"></a>
</h4><p>

<if has_grand_parents p OR has_grand_children p>
  <h4>
  <if has_grand_parents p>
    <a href="`commd``access p`;m=A"><eval transl "Ancestors"></a> /
  </if>
  <if has_grand_children p>
    <a href="`commd``access p`;m=D"><eval transl "Descendants"></a> /
  </if>
  <if has_grand_parents p>
    <a href="`commd``access p`;m=C"><eval transl "Cousins (general term)"></a> /
  </if>
  </h4>
  <p>
</if>

<if is_wizard>
  <h4>
  <a href="`commd``access p`;m=U"><eval transl "Update"></a>
  </h4><p>
</if>

</body>

<p><hr width=80%><p>
