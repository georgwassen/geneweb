<comm param = p1,p2,result>
<comm e="$Id: s_relation.txt,v 1.1.2.3 1999-04-15 00:57:08 ddr Exp $">
<comm e="Copyright (c) 1999 INRIA">
<comm
  Context:
    p1          first person
    p2          person the relationship is computed with
    result      result of this relationship

  The result is an option type:
  - "None" means "p1 = p2" or no relationship between p1 and p2
  - "Some (rel_list, total, value)" means found relationship(s)
    The variable "rel_list" is a list of (n1, n2, list):
      n1 is the length of the first branch to the common ancestor
      n2 is the length of the second branch to the common ancestor
      list is a list of (p, n):
        p is a common ancestor
        n is the number of relationships passing by him.
    The variable "total" is the total number of relationships.
    The variable "value" is the relationship value (consanguinity).
>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<head>
  <meta name="ROBOTS" content="NONE">
  <title><eval transl "Relationship"></title>
</head>
<body>

<h1><eval transl "Relationship"></h1>

<match result>
<with None>
  <if p1 = p2><eval transl  "It is the same person!">
  <else>
    <format (ftransl "No known relationship link between %t and %t")>
      <match main_title p1>
      <with Some t when not (is_private_access p1)>
        <a href="`commd``access p1`">
        <eval titled_person_text p1 t></a>,
        <em><eval title_ident t> <eval title_place t></em>
      <with _><a href="`commd``access p1`"><eval person_text p1></a>
      </match>
      <match main_title p2>
      <with Some t when not (is_private_access p2)>
        <a href="`commd``access p2`">
        <eval titled_person_text p2 t></a>,
        <em><eval title_ident t> <eval title_place t></em>
      <with _><a href="`commd``access p2`"><eval person_text p2></a>
      </match>
    </format>
  </if>
<with Some (rel_list, total, relationship_value)>
  <for (n1, n2, list) in rel_list>

    <match main_title p2>
    <with Some t>
      <eval titled_person_text p2 t>,
      <em><eval title_ident t> <eval title_place t></em>
    <with None><eval person_text p2>
    </match>
    <eval transl "is">
    <strong>
      <match (n1, n2)>
      <with (1, 0)>
        <eval transl_nth "the father/the mother/a parent" (sex p2)>
      <with (2, 0)>
        <eval transl_nth "a grandfather/a grandmother/a grandparent"
         (sex p2)>
      <with (3, 0)>
        <eval transl_nth
         "a great-grandfather/a great-grandmother/a great-grandparent"
         (sex p2)>
      <with (n, 0)>
        <eval transl_nth "an ancestor" (sex p2)>
        <format (ftransl "of the %s generation")
          (transl_nth "nth (generation)" n)>
        </format>
      <with (1, 1)>
        <if list_length list = 1>
          <eval transl_nth "a half-brother/a half-sister/a half-sibling"
             (sex p2)>
        <else>
          <eval transl_nth "a brother/a sister/a sibling" (sex p2)>
        </if>
      <with (2, 2)><eval transl_nth "a cousin" (sex p2)>
      <with (3, 3)><eval transl_nth "a 2nd cousin" (sex p2)>
      <with (_, _) when n1 = n2>
        <format (ftransl_nth "a %s cousin" (sex p2))
           (transl_nth (transl_nth "*nth (cousin)*" (sex p2)) (n1 - 1))>
        </format>
      <with _>xxx (<eval (string_of_int n1)> <eval (string_of_int n2)>)
      </match>
    </strong>
    <if n2 LT n1><eval transl_nth "of" 0>
    <else><eval transl_nth "of (same or greater generation level)" 0></if>
    <match main_title p1>
    <with Some t>
      <eval titled_person_text p1 t>,
      <em><eval title_ident t> <eval title_place t></em>.
    <with None><eval person_text p1>.
    </match>
    <if n1 = 0 OR n2 = 0> (ancestor)
    <else>
      <ul><li><eval transl "Indeed,">
        <ul>
        <for (a, n) in list>
          <li>
            <match main_title a>
            <with Some t>
              <eval titled_person_text a t>,
              <em><eval title_ident t> <eval title_place t></em>.
            <with None><eval person_text a>
            </match>
        </for>
        </ul>
      </ul>
    </if>
    <p>
  </for>

  <eval transl "Total">:
  <em>
    <eval string_of_num_sep total>
    <if string_of_num_sep total = "1">
       <eval transl_nth "relationship link/relationship links" 0>
    <else><eval transl_nth "relationship link/relationship links" 1>
    </if>
  </em>
</match>

</body>
